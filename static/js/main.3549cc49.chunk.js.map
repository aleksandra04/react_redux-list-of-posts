{"version":3,"sources":["reducers/LoadingReducer.js","reducers/LoadedReducer.js","reducers/ErrorReducer.js","ArrsAPI.js","reducers/PostsReducer.js","reducers/FilterReducer.js","reducers/store.js","components/Comment.js","components/CommentList.js","components/User.js","components/Post.js","components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["changeLoading","value","type","loadingReducer","state","arguments","length","undefined","action","changeLoaded","loadedReducer","postLoadingError","errorReducer","getPostsFromServer","response","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","getUsers","_context2","getComments","_context3","modifyPosts","_ref","_ref2","posts","users","comments","Promise","all","Object","slicedToArray","map","post","currentUser","find","user","id","userId","userComment","filter","comment","postId","objectSpread2","postsReducer","commentId","filterReducer","getPosts","title","includes","filterQuery","body","getLoading","getLoaded","getError","rootReducer","combineReducers","loading","loaded","error","store","createStore","applyMiddleware","thunk","connect","dispatch","deleteComment","postFunctions","react_default","createElement","className","onClick","name","email","CommentList","currentComment","Comment","User","Fragment","concat","address","city","street","suite","deletePost","components_User","components_CommentList","functions","isLoading","postsLoaded","loadingError","postsFromServer","t0","setQuery","changeQuery","debouncedInputHandler","_","debounce","htmlFor","onChange","inputEvent","target","components_Post","key","App","components_PostList","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3549cc49.chunk.js","sourcesContent":["const CHANGE_LOADING = 'CHANGE_LOADING';\n\nexport const changeLoading = value => ({\n  type: CHANGE_LOADING, value,\n});\n\nconst loadingReducer = (state = false, action) => {\n  switch (action.type) {\n    case CHANGE_LOADING:\n      return action.value;\n    default:\n      return state;\n  }\n};\n\nexport default loadingReducer;\n","const CHANGE_LOADED = 'CHANGE_LOADED';\n\nexport const changeLoaded = value => ({\n  type: CHANGE_LOADED, value,\n});\n\nconst loadedReducer = (state = false, action) => {\n  switch (action.type) {\n    case CHANGE_LOADED:\n      return action.value;\n    default:\n      return state;\n  }\n};\n\nexport default loadedReducer;\n","const CHANGE_ERROR = 'CHANGE_ERROR';\n\nexport const postLoadingError = value => ({\n  type: CHANGE_ERROR, value,\n});\n\nconst errorReducer = (state = false, action) => {\n  switch (action.type) {\n    case CHANGE_ERROR:\n      return action.value;\n    default:\n      return state;\n  }\n};\n\nexport default errorReducer;\n","const URLposts = 'https://jsonplaceholder.typicode.com/posts';\nconst URLusers = 'https://jsonplaceholder.typicode.com/users';\nconst URLcomments = 'https://jsonplaceholder.typicode.com/comments';\n\nexport const getPostsFromServer = async() => {\n  const response = await fetch(URLposts);\n\n  return response.json();\n};\n\nexport const getUsers = async() => {\n  const response = await fetch(URLusers);\n\n  return response.json();\n};\n\nexport const getComments = async() => {\n  const response = await fetch(URLcomments);\n\n  return response.json();\n};\n","import { getPostsFromServer, getUsers, getComments } from '../ArrsAPI';\nimport { changeLoading } from './LoadingReducer';\nimport { changeLoaded } from './LoadedReducer';\nimport { postLoadingError } from './ErrorReducer';\n\nconst SET_POSTS = 'SET_POSTS';\nconst DELETE_POST = 'DELETE_POST';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\n\nexport const setPosts = value => ({\n  type: SET_POSTS, value,\n});\nexport const deletePost = value => ({\n  type: DELETE_POST, value,\n});\nexport const deleteComment = (postId, commentId) => ({\n  type: DELETE_COMMENT, postId, commentId,\n});\n\nconst modifyPosts = async() => {\n  const [posts, users, comments] = await Promise\n    .all([getPostsFromServer(), getUsers(), getComments()]);\n\n  return posts.map((post) => {\n    const currentUser = users.find(user => user.id === post.userId);\n    const userComment = comments\n      .filter(comment => comment.postId === post.id);\n\n    return {\n      ...post,\n      user: currentUser,\n      comments: userComment,\n    };\n  });\n};\n\nexport const loadPosts = () => async(dispatch) => {\n  try {\n    dispatch(changeLoading(true));\n\n    const postsFromServer = await modifyPosts();\n\n    dispatch(setPosts(postsFromServer));\n    dispatch(changeLoading(false));\n    dispatch(changeLoaded(true));\n    dispatch(postLoadingError(false));\n  } catch (e) {\n    dispatch(postLoadingError(true));\n  }\n};\n\nconst postsReducer = (state = [], action) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.value;\n\n    case DELETE_POST:\n      return state\n        .filter(post => post.id !== action.value);\n\n    case DELETE_COMMENT:\n      return state\n        .map(post => (post.id === action.postId\n          ? {\n            ...post,\n            comments: post.comments\n              .filter(comment => comment.id !== action.commentId),\n          }\n          : post));\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","const CHANGE_QUERY = 'CHANGE_QUERY';\n\nexport const changeQuery = value => ({\n  type: CHANGE_QUERY, value,\n});\n\nconst filterReducer = (state = '', action) => {\n  switch (action.type) {\n    case CHANGE_QUERY: return action.value;\n    default: return state;\n  }\n};\n\nexport default filterReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport loadingReducer from './LoadingReducer';\nimport loadedReducer from './LoadedReducer';\nimport errorReducer from './ErrorReducer';\nimport postsReducer from './PostsReducer';\nimport filterReducer from './FilterReducer';\n\nexport const getPosts = state => state.posts\n  .filter(post => post.title.includes(state.filterQuery)\n    || post.body.includes(state.filterQuery));\nexport const getLoading = state => state;\nexport const getLoaded = state => state;\nexport const getError = state => state;\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  loading: loadingReducer,\n  loaded: loadedReducer,\n  error: errorReducer,\n  filterQuery: filterReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as postFunctions from '../reducers/PostsReducer';\n\nconst CurrComment = ({ comment, postId, deleteComment }) => (\n  <li>\n    <button\n      type=\"button\"\n      className=\"delete\"\n      onClick={() => deleteComment(postId, comment.id)}\n    >\n      x\n    </button>\n    <p className=\"comment\">{comment.name}</p>\n    <p className=\"comment\">{comment.body}</p>\n    <p className=\"comment\">{comment.email}</p>\n  </li>\n);\n\nconst getExtraMethods = dispatch => ({\n  deleteComment: (postId, commentId) => dispatch(\n    postFunctions.deleteComment(postId, commentId)\n  ),\n});\n\nCurrComment.propTypes = {\n  deleteComment: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n  comment: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(null, getExtraMethods)(CurrComment);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CurrComment from './Comment';\n\nconst CommentList = ({ comments, postId }) => (\n  comments.map(currentComment => (\n    <CurrComment\n      comment={currentComment}\n      postId={postId}\n    />\n  ))\n);\n\nCommentList.propTypes\n  = { comments: PropTypes.arrayOf(PropTypes.object).isRequired };\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user }) => (\n  <>\n    <p className=\"user\">{user.name}</p>\n    <p className=\"user\">{user.email}</p>\n    <p className=\"user\">\n      {`${user.address.city} ${user.address.street} ${user.address.suite}`}\n    </p>\n  </>\n);\n\nUser.propTypes\n  = { user: PropTypes.objectOf(PropTypes.string).isRequired };\n\nexport default User;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport CommentList from './CommentList';\nimport User from './User';\nimport * as postFunctions from '../reducers/PostsReducer';\n\nconst Post = ({ post, deletePost }) => (\n  <div className=\"post\">\n    <button\n      type=\"button\"\n      onClick={() => deletePost(post.id)}\n      className=\"delete\"\n    >\n      delete post\n    </button>\n    <p className=\"title\">{post.title}</p>\n    <p>{post.body}</p>\n    <div className=\"user\">\n      <User user={post.user} />\n    </div>\n    <ul>\n      <p className=\"title-comment\">Comments</p>\n      <CommentList comments={post.comments} postId={post.id} />\n    </ul>\n  </div>\n);\n\nconst getExtraMethods = dispatch => ({\n  deletePost: value => dispatch(\n    postFunctions.deletePost(value)\n  ),\n});\n\nPost.propTypes = {\n  post: PropTypes.oneOfType([PropTypes.string,\n    PropTypes.number,\n  ])\n    .isRequired,\n};\n\nPost.propTypes = { deletePost: PropTypes.func.isRequired };\n\nexport default connect(null, getExtraMethods)(Post);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport * as functions from '../reducers/store';\nimport Post from './Post';\nimport { loadPosts } from '../reducers/PostsReducer';\nimport { changeQuery } from '../reducers/FilterReducer';\n\nconst PostList = ({\n  posts,\n  isLoading,\n  postsLoaded,\n  loadingError,\n  setQuery,\n  getPosts,\n}) => {\n  const debouncedInputHandler = _.debounce(setQuery, 500);\n\n  return (\n    <div>\n      {posts.length === 0 && !loadingError && !isLoading\n        && (\n          <button\n            className=\"load\"\n            type=\"button\"\n            onClick={getPosts}\n          >\n            Load\n          </button>\n        )\n      }\n      {isLoading && !loadingError && <div className=\"loading\">Loading...</div>}\n      {postsLoaded && !isLoading && (\n        <div>\n          <label htmlFor=\"search\">\n            Search\n            <input\n              id=\"search\"\n              className=\"input\"\n              type=\"search\"\n              onChange={inputEvent => debouncedInputHandler(\n                inputEvent.target.value\n              )}\n            />\n          </label>\n          {posts.map(post => (\n            <Post post={post} key={post.id} />\n          ))}\n        </div>\n      )}\n      {loadingError && (\n        <div className=\"button_container\">\n          <p className=\"error\">Error occurred</p>\n          <button\n            className=\"load\"\n            type=\"button\"\n            onClick={getPosts}\n          >\n            Try again\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getExtraData = state => ({\n  posts: functions.getPosts(state),\n  isLoading: functions.getLoading(state.loading),\n  postsLoaded: functions.getLoaded(state.loaded),\n  loadingError: functions.getError(state.error),\n});\n\nconst getExtraMethods = dispatch => ({\n  getPosts: value => dispatch(loadPosts(value)),\n  setQuery: value => dispatch(changeQuery(value)),\n});\n\nPostList.propTypes = {\n  posts: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  postsLoaded: PropTypes.bool.isRequired,\n  loadingError: PropTypes.bool.isRequired,\n  setQuery: PropTypes.func.isRequired,\n  getPosts: PropTypes.func.isRequired,\n};\n\nexport default connect(getExtraData, getExtraMethods)(PostList);\n","import React from 'react';\nimport './App.css';\nimport PostList from './components/PostList';\n\nconst App = () => (\n  <div className=\"App\">\n    <h1>Dynamic list of posts</h1>\n    <PostList />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n\n        if (installingWorker == null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './reducers/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}